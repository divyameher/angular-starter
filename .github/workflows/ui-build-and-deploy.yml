name: Build & Deploy
on: [workflow_dispatch, push]
jobs:
  test:
    name: Lint & Unit Tests
    runs-on: ubuntu-latest
    outputs: 
      npm-cache-dir: ${{steps.npm-cache-dir.outputs.dir}}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Publish cache dir path
        run: echo "${{steps.npm-cache-dir.outputs.dir}}"

      - name: Cache dependencies
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          # path: ${{ steps.npm-cache-dir.outputs.dir }}
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Execute Linting
        run: npm run lint

      - name: Execute Unit Tests & Coverage
        run: npm run test
    
  
  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Cache dependencies
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          # path: ${{ needs.test.outputs.npm-cache-dir }}
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/angular-starter
  
  deploy:
    name: Deploy Project
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      
      - name: Output Downloaded artifacts contents
        run: ls
        
      - name: Deploy
        run: echo "Deploying"
